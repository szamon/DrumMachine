{"version":3,"sources":["Display.jsx","Pad.jsx","Pads.jsx","DrumMachine.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","props","react_default","a","createElement","className","display","btnClicked","background","btnNotClicked","Pad","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","btnClick","playSample","bind","assertThisInitialized","handleKeyPress","handleColorChange","_this2","setState","setTimeout","document","addEventListener","removeEventListener","e","drumsInfo","keyTrigger","toLowerCase","key","_this3","getElementById","id","play","updateDisplay","clearDisplay","btnStyling","onClick","style","replace","String","fromCharCode","src","url","React","Component","Pads","drumList","map","val","index","src_Pad","tabIndex","keyCode","DrumMachine","text","src_Display","src_Pads","App","src_DrumMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fbcbaa1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Display = (props) => {\r\n    return <div className=\"drum-machine_display\">{props.display}</div>\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst btnClicked = {background: '#6b7075'};\r\nconst btnNotClicked = {};\r\n\r\nclass Pad extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            btnClick: true\r\n        }\r\n        this.playSample=this.playSample.bind(this);\r\n        this.handleKeyPress=this.handleKeyPress.bind(this);\r\n        this.handleColorChange=this.handleColorChange.bind(this);\r\n    }\r\n    handleColorChange(){\r\n        this.setState({\r\n            btnClick: !this.state.btnClick\r\n        });\r\n        setTimeout(()=>{\r\n            this.setState({btnClick: !this.state.btnClick})\r\n        }, 100)\r\n    }\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.handleKeyPress)\r\n    }\r\n    componentWillUnmount(){\r\n        document.removeEventListener('keydown', this.handleKeyPress);\r\n    }\r\n    handleKeyPress(e){\r\n     if(this.props.drumsInfo.keyTrigger.toLowerCase()===e.key){\r\n         this.playSample();\r\n     };\r\n    }\r\n    playSample(e){\r\n        const sample = document.getElementById(this.props.drumsInfo.id);\r\n        sample.play();\r\n        this.props.updateDisplay(this.props.drumsInfo.id);\r\n        setTimeout(()=>{this.props.clearDisplay()},500);\r\n        this.handleColorChange();\r\n    }\r\n    render(){\r\n        let btnStyling = this.state.btnClick ? btnNotClicked : btnClicked;\r\n        return <div className=\"drum-pad\" onClick={this.playSample} style={btnStyling}>\r\n            <div className=\"drum-pad_text\">{this.props.drumsInfo.id.replace(/-/g, String.fromCharCode(160))}</div>\r\n            <div className=\"drum-pad_text drum-pad__key\">{this.props.drumsInfo.keyTrigger}</div>\r\n            <audio className=\"clip\" id={this.props.drumsInfo.id} src={this.props.drumsInfo.url}></audio>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Pad;","import React from 'react';\r\nimport Pad from './Pad.jsx';\r\n\r\nclass Pads extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        let drumList = this.props.drumsInfo.map((val, index) =>{\r\n            return <Pad key={val+index} tabIndex={val+index} drumsInfo={this.props.drumsInfo[index]} updateDisplay={this.props.updateDisplay} clearDisplay={this.props.clearDisplay} handleKeyPress={this.props.handleKeyPress} />\r\n        });\r\n        return <div className=\"drum-pads\">\r\n        {drumList}\r\n        <span className=\"clearing-span\"></span>\r\n    </div>\r\n    }\r\n}\r\n\r\nexport default Pads;","import React from 'react';\r\nimport Display from './Display.jsx';\r\nimport Pads from './Pads.jsx';\r\n\r\nconst drumsInfo = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n  }, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n  }, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n  }, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n  }, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n  },\r\n];\r\n\r\nclass DrumMachine extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          display: \"Push the button!\"\r\n        }\r\n        this.updateDisplay=this.updateDisplay.bind(this);\r\n        this.clearDisplay=this.clearDisplay.bind(this);\r\n    }\r\n    updateDisplay(text){\r\n      this.setState({\r\n        display: text.replace(/-/g, String.fromCharCode(160))\r\n      })\r\n    }\r\n    clearDisplay(){\r\n      this.setState({\r\n        display: \"Push the button!\"\r\n      })\r\n    }\r\n  \r\n    render(){\r\n        return <div id=\"drum-machine\" className=\"drum-machine\">\r\n            <div className=\"drum-machine-left\">\r\n              <Display display={this.state.display} />\r\n              <div className=\"drum-machine-logo\">Drum Machine 2000</div>\r\n            </div>\r\n            <Pads drumsInfo={drumsInfo} updateDisplay={this.updateDisplay} clearDisplay={this.clearDisplay} handleKeyPress={this.handleKeyPress} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default DrumMachine;","import React from 'react';\nimport './main.css';\nimport DrumMachine from './DrumMachine.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <div>\n        <DrumMachine />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}